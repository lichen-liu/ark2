package app.gui;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.util.concurrent.TimeoutException;

import javax.swing.JOptionPane;

import org.hyperledger.fabric.gateway.Contract;
import org.hyperledger.fabric.gateway.ContractException;

import app.user.AnynomousAppUser;
import app.user.PublishableAppUser;
import app.user.ReadOnlyAppUser;
import app.utils.ByteUtils;
import app.utils.Cryptography;

public class ForumJFrame extends javax.swing.JFrame {

    /**
     *
     */
    private static final long serialVersionUID = 1L;

    /**
     * Creates new form ForumJFrame
     */
    private ForumJFrame(final Contract contract) {
        this.contract = contract;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userPublicKeyJTextField = new javax.swing.JTextField();
        userPrivateKeyJTextField = new javax.swing.JTextField();
        generateKeyPairJButton = new javax.swing.JButton();
        pointAmountJTextField = new javax.swing.JTextField();
        refreshPointAmountJButton = new javax.swing.JButton();
        pointAmountJLabel = new javax.swing.JLabel();
        MessageJTextField = new javax.swing.JTextField();
        searchJTextField = new javax.swing.JTextField();
        contentJTabbedPane = new javax.swing.JTabbedPane();
        viewPostJPanel = new javax.swing.JPanel();
        showPostKeysJScrollPane = new javax.swing.JScrollPane();
        showPostKeysJList = new javax.swing.JList<>();
        showPostKeysQueryJComboBox = new javax.swing.JComboBox<>();
        publishPostJPanel = new javax.swing.JPanel();
        postEditorJScrollPane = new javax.swing.JScrollPane();
        postEditorJTextArea = new javax.swing.JTextArea();
        publishPostSubmitJButton = new javax.swing.JButton();
        publishPostResetJButton = new javax.swing.JButton();
        userSearchJSeparator = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        userPublicKeyJTextField.setToolTipText("User Public Key");
        userPublicKeyJTextField.setActionCommand("<Not Set>");
        userPublicKeyJTextField.setName(""); // NOI18N

        userPrivateKeyJTextField.setToolTipText("User Private Key");
        userPrivateKeyJTextField.setName(""); // NOI18N

        generateKeyPairJButton.setText("Generate Key Pair");
        generateKeyPairJButton.setName(""); // NOI18N
        generateKeyPairJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                generateKeyPairJButtonActionPerformed(evt);
            }
        });

        pointAmountJTextField.setEditable(false);
        pointAmountJTextField.setToolTipText("Point Amount");
        pointAmountJTextField.setName(""); // NOI18N

        refreshPointAmountJButton.setText("Refresh");
        refreshPointAmountJButton.setName(""); // NOI18N
        refreshPointAmountJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                refreshPointAmountJButtonActionPerformed(evt);
            }
        });

        pointAmountJLabel.setText("Point Amount");
        pointAmountJLabel.setToolTipText("");
        pointAmountJLabel.setName(""); // NOI18N

        MessageJTextField.setEditable(false);
        MessageJTextField.setToolTipText("Message");

        searchJTextField.setToolTipText("Search Bar");

        showPostKeysJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        showPostKeysJScrollPane.setViewportView(showPostKeysJList);

        showPostKeysQueryJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(
                new String[] { "All", "Search By Author", "Search By Post Key" }));
        showPostKeysQueryJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                showPostKeysQueryJComboBoxActionPerformed(evt);
            }
        });

        final javax.swing.GroupLayout viewPostJPanelLayout = new javax.swing.GroupLayout(viewPostJPanel);
        viewPostJPanel.setLayout(viewPostJPanelLayout);
        viewPostJPanelLayout
                .setHorizontalGroup(viewPostJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(viewPostJPanelLayout.createSequentialGroup()
                                .addGroup(viewPostJPanelLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(showPostKeysJScrollPane)
                                        .addComponent(showPostKeysQueryJComboBox, 0, 284, Short.MAX_VALUE))
                                .addGap(0, 991, Short.MAX_VALUE)));
        viewPostJPanelLayout.setVerticalGroup(viewPostJPanelLayout
                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewPostJPanelLayout.createSequentialGroup()
                        .addComponent(showPostKeysQueryJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(
                                showPostKeysJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)));

        contentJTabbedPane.addTab("Posts", viewPostJPanel);

        postEditorJTextArea.setColumns(20);
        postEditorJTextArea.setLineWrap(true);
        postEditorJTextArea.setRows(5);
        postEditorJTextArea.setTabSize(4);
        postEditorJTextArea.setWrapStyleWord(true);
        postEditorJScrollPane.setViewportView(postEditorJTextArea);

        publishPostSubmitJButton.setText("Publish");
        publishPostSubmitJButton.setToolTipText("");
        publishPostSubmitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                publishPostSubmitJButtonActionPerformed(evt);
            }
        });

        publishPostResetJButton.setText("Reset");
        publishPostResetJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                publishPostResetJButtonActionPerformed(evt);
            }
        });

        final javax.swing.GroupLayout publishPostJPanelLayout = new javax.swing.GroupLayout(publishPostJPanel);
        publishPostJPanel.setLayout(publishPostJPanelLayout);
        publishPostJPanelLayout.setHorizontalGroup(publishPostJPanelLayout
                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(postEditorJScrollPane)
                .addGroup(publishPostJPanelLayout.createSequentialGroup().addContainerGap()
                        .addComponent(publishPostResetJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1115, Short.MAX_VALUE)
                        .addComponent(publishPostSubmitJButton).addContainerGap()));
        publishPostJPanelLayout
                .setVerticalGroup(publishPostJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(publishPostJPanelLayout.createSequentialGroup()
                                .addComponent(postEditorJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 552,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(publishPostJPanelLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(publishPostSubmitJButton).addComponent(publishPostResetJButton))
                                .addContainerGap(10, Short.MAX_VALUE)));

        contentJTabbedPane.addTab("Publish", publishPostJPanel);

        final javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup().addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(searchJTextField)
                                .addGroup(layout.createSequentialGroup()
                                        .addComponent(userPublicKeyJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(userPrivateKeyJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(generateKeyPairJButton, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(pointAmountJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pointAmountJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(refreshPointAmountJButton, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                .addComponent(contentJTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(MessageJTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(userSearchJSeparator));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup().addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(userPublicKeyJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(userPrivateKeyJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(generateKeyPairJButton).addComponent(refreshPointAmountJButton)
                                .addComponent(pointAmountJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(pointAmountJLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userSearchJSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(searchJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(contentJTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 619,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MessageJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showPostKeysQueryJComboBoxActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_showPostKeysQueryJComboBoxActionPerformed
        if (this.showPostKeysQueryJComboBox.getSelectedItem().equals("All")) {
            final var userApp = new AnynomousAppUser(this.contract);
            final String[] postKeys = userApp.fetchAllPostKeys();
            this.showPostKeysJList.setListData(postKeys);
        }
    }// GEN-LAST:event_showPostKeysQueryJComboBoxActionPerformed

    private void generateKeyPairJButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_generateKeyPairJButtonActionPerformed
        if (!this.userPublicKeyJTextField.getText().isEmpty() || !this.userPrivateKeyJTextField.getText().isEmpty()) {
            final int choice = JOptionPane.showConfirmDialog(null,
                    "Do you want to overwrite the existing Public and/or Private Keys?", "Warning",
                    JOptionPane.OK_CANCEL_OPTION);
            if (choice == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }
        try {
            final KeyPair keyPair = Cryptography.generateRandomKeyPair();
            final String publicKeyString = ByteUtils.toHexString(keyPair.getPublic().getEncoded());
            final String privateKeyString = ByteUtils.toHexString(keyPair.getPrivate().getEncoded());
            this.userPublicKeyJTextField.setText(publicKeyString);
            this.userPrivateKeyJTextField.setText(privateKeyString);
        } catch (final InvalidAlgorithmParameterException e) {
            e.printStackTrace();
        } catch (final NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }// GEN-LAST:event_generateKeyPairJButtonActionPerformed

    private void publishPostResetJButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_publishPostResetJButtonActionPerformed
        final int choice = JOptionPane.showConfirmDialog(null, "Do you want to discard the content?", "Warning",
                JOptionPane.OK_CANCEL_OPTION);
        if (choice == JOptionPane.CANCEL_OPTION) {
            return;
        }
        this.postEditorJTextArea.setText(new String());
    }// GEN-LAST:event_publishPostResetJButtonActionPerformed

    private void publishPostSubmitJButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_publishPostSubmitJButtonActionPerformed
        final String publicKeyString = this.userPublicKeyJTextField.getText();
        final String privateKeyString = this.userPrivateKeyJTextField.getText();

        if (publicKeyString.isEmpty() || privateKeyString.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide a Public/Private Key Pair!");
            return;
        }

        final int choice = JOptionPane.showConfirmDialog(null,
                "Do you want to publish the post using the provided Public and/or Private Keys?", "Confirm",
                JOptionPane.OK_CANCEL_OPTION);
        if (choice == JOptionPane.CANCEL_OPTION) {
            return;
        }

        try {
            final var appUser = new PublishableAppUser(this.contract,
                    Cryptography.parsePublicKey(ByteUtils.toByteArray(publicKeyString)),
                    Cryptography.parsePrivateKey(ByteUtils.toByteArray(privateKeyString)));

            appUser.publishNewPost(this.postEditorJTextArea.getText());

            JOptionPane.showMessageDialog(null, "The post was published successfully!");

            this.postEditorJTextArea.setText(new String());
        } catch (NoSuchAlgorithmException | InvalidKeySpecException | InvalidKeyException | ContractException
                | SignatureException | TimeoutException | InterruptedException e1) {
            JOptionPane.showMessageDialog(null, "The post failed to be published!");
            e1.printStackTrace();
        }

    }// GEN-LAST:event_publishPostSubmitJButtonActionPerformed

    private void refreshPointAmountJButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_refreshPointAmountJButtonActionPerformed
        final String userPublicKey = this.userPublicKeyJTextField.getText();
        String pointAmount = new String();
        try {
            final var appUser = new ReadOnlyAppUser(this.contract,
                    Cryptography.parsePublicKey(ByteUtils.toByteArray(userPublicKey)));
            pointAmount = appUser.getPointAmount();
        } catch (ContractException | InvalidKeySpecException | NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        this.pointAmountJTextField.setText(pointAmount);
    }// GEN-LAST:event_refreshPointAmountJButtonActionPerformed

    public static void run(final Contract contract) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (final javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (final ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ForumJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (final InstantiationException ex) {
            java.util.logging.Logger.getLogger(ForumJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (final IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ForumJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (final javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ForumJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ForumJFrame(contract).setVisible(true);
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        run(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField MessageJTextField;
    private javax.swing.JTabbedPane contentJTabbedPane;
    private javax.swing.JButton generateKeyPairJButton;
    private javax.swing.JLabel pointAmountJLabel;
    private javax.swing.JTextField pointAmountJTextField;
    private javax.swing.JScrollPane postEditorJScrollPane;
    private javax.swing.JTextArea postEditorJTextArea;
    private javax.swing.JPanel publishPostJPanel;
    private javax.swing.JButton publishPostResetJButton;
    private javax.swing.JButton publishPostSubmitJButton;
    private javax.swing.JButton refreshPointAmountJButton;
    private javax.swing.JTextField searchJTextField;
    private javax.swing.JList<String> showPostKeysJList;
    private javax.swing.JScrollPane showPostKeysJScrollPane;
    private javax.swing.JComboBox<String> showPostKeysQueryJComboBox;
    private javax.swing.JTextField userPrivateKeyJTextField;
    private javax.swing.JTextField userPublicKeyJTextField;
    private javax.swing.JSeparator userSearchJSeparator;
    private javax.swing.JPanel viewPostJPanel;
    // End of variables declaration//GEN-END:variables

    private final Contract contract;
}
