package app.gui;

import java.beans.PropertyChangeEvent;
import java.security.InvalidAlgorithmParameterException;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.util.Arrays;
import java.util.concurrent.ExecutionException;

import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.SwingWorker;
import javax.swing.text.DefaultCaret;

import org.hyperledger.fabric.gateway.Contract;

import app.repository.data.Like;
import app.repository.data.PointTransaction;
import app.repository.data.Post;
import app.user.NamedWriteableService;
import app.user.ServiceProvider;
import app.utils.ByteUtils;
import app.utils.Cryptography;

public class ForumJFrame extends javax.swing.JFrame {

    /**
     *
     */
    private static final long serialVersionUID = 1L;

    /**
     * Creates new form ForumJFrame
     */
    private ForumJFrame(final Contract contract, final String frameTitleString) {
        this.contract = contract;
        this.frameTitleString = frameTitleString;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userPublicKeyJTextField = new javax.swing.JTextField();
        userPrivateKeyJTextField = new javax.swing.JTextField();
        generateKeyPairJButton = new javax.swing.JButton();
        pointAmountJTextField = new javax.swing.JTextField();
        refreshPointAmountJButton = new javax.swing.JButton();
        pointAmountJLabel = new javax.swing.JLabel();
        MessageJTextField = new javax.swing.JTextField();
        searchJTextField = new javax.swing.JTextField();
        contentJTabbedPane = new javax.swing.JTabbedPane();
        viewPostJSplitPane = new javax.swing.JSplitPane();
        viewPostLeftJPanel = new javax.swing.JPanel();
        viewPostKeysQueryJComboBox = new javax.swing.JComboBox<>();
        viewPostKeysJScrollPane = new javax.swing.JScrollPane();
        viewPostKeysJList = new javax.swing.JList<>();
        viewPostKeysQueryCountsJTextField = new javax.swing.JTextField();
        viewPostRightJPanel = new javax.swing.JPanel();
        viewPostJScrollPane = new javax.swing.JScrollPane();
        viewPostJTextArea = new javax.swing.JTextArea();
        viewPostLikeJButton = new javax.swing.JButton();
        viewPostStatusJTextField = new javax.swing.JTextField();
        viewPostPostKeyJTextField = new javax.swing.JTextField();
        publishPostJPanel = new javax.swing.JPanel();
        postEditorJScrollPane = new javax.swing.JScrollPane();
        postEditorJTextArea = new javax.swing.JTextArea();
        publishPostSubmitJButton = new javax.swing.JButton();
        publishPostResetJButton = new javax.swing.JButton();
        viewLikeJSplitPane = new javax.swing.JSplitPane();
        viewLikeLeftJPanel = new javax.swing.JPanel();
        viewLikeKeysQueryJComboBox = new javax.swing.JComboBox<>();
        viewLikeKeysJScrollPane = new javax.swing.JScrollPane();
        viewLikeKeysJList = new javax.swing.JList<>();
        viewLikeKeysQueryCountsJTextField = new javax.swing.JTextField();
        viewLikeRightJPanel = new javax.swing.JPanel();
        viewLikeJScrollPane = new javax.swing.JScrollPane();
        viewLikeJTextArea = new javax.swing.JTextArea();
        viewLikeStatusJTextField = new javax.swing.JTextField();
        viewLikeLikeKeyJTextField = new javax.swing.JTextField();
        viewPointTransactionJSplitPane = new javax.swing.JSplitPane();
        viewPointTransactionLeftJPanel = new javax.swing.JPanel();
        viewPointTransactionKeysQueryJComboBox = new javax.swing.JComboBox<>();
        viewPointTransactionKeysJScrollPane = new javax.swing.JScrollPane();
        viewPointTransactionKeysJList = new javax.swing.JList<>();
        viewPointTransactionKeysQueryCountsJTextField = new javax.swing.JTextField();
        viewPointTransactionRightJPanel = new javax.swing.JPanel();
        viewPointTransactionJScrollPane = new javax.swing.JScrollPane();
        viewPointTransactionJTextArea = new javax.swing.JTextArea();
        viewPointTransactionStatusJTextField = new javax.swing.JTextField();
        viewPointTransactionPointTransactionKeyJTextField = new javax.swing.JTextField();
        userSearchJSeparator = new javax.swing.JSeparator();
        statusJProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(this.frameTitleString);
        setPreferredSize(new java.awt.Dimension(1280, 750));
        setResizable(false);

        userPublicKeyJTextField.setToolTipText("User Public Key");
        userPublicKeyJTextField.setActionCommand("<Not Set>");
        userPublicKeyJTextField.setName(""); // NOI18N

        userPrivateKeyJTextField.setToolTipText("User Private Key");
        userPrivateKeyJTextField.setName(""); // NOI18N

        generateKeyPairJButton.setText("Generate Key Pair");
        generateKeyPairJButton.setName(""); // NOI18N
        generateKeyPairJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                generateKeyPairJButtonActionPerformed(evt);
            }
        });

        pointAmountJTextField.setEditable(false);
        pointAmountJTextField.setToolTipText("Point Amount");
        pointAmountJTextField.setName(""); // NOI18N

        refreshPointAmountJButton.setText("Refresh");
        refreshPointAmountJButton.setName(""); // NOI18N
        refreshPointAmountJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                refreshPointAmountJButtonActionPerformed(evt);
            }
        });

        pointAmountJLabel.setText("Point Amount");
        pointAmountJLabel.setToolTipText("");
        pointAmountJLabel.setName(""); // NOI18N

        MessageJTextField.setEditable(false);
        MessageJTextField.setText("Status");
        MessageJTextField.setToolTipText("Message");

        searchJTextField.setToolTipText("Search Bar");
        searchJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                searchJTextFieldActionPerformed(evt);
            }
        });

        viewPostJSplitPane.setDividerLocation(220);

        viewPostLeftJPanel.setPreferredSize(new java.awt.Dimension(400, 500));

        viewPostKeysQueryJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(
                new String[] { "All", "Search By Author", "Search By Post Key" }));
        viewPostKeysQueryJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                viewPostKeysQueryJComboBoxActionPerformed(evt);
            }
        });

        viewPostKeysJScrollPane.setPreferredSize(new java.awt.Dimension(400, 500));

        viewPostKeysJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        viewPostKeysJList.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(final java.beans.PropertyChangeEvent evt) {
                viewPostKeysJListPropertyChange(evt);
            }
        });
        viewPostKeysJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(final javax.swing.event.ListSelectionEvent evt) {
                viewPostKeysJListValueChanged(evt);
            }
        });
        viewPostKeysJScrollPane.setViewportView(viewPostKeysJList);

        viewPostKeysQueryCountsJTextField.setEditable(false);

        final javax.swing.GroupLayout viewPostLeftJPanelLayout = new javax.swing.GroupLayout(viewPostLeftJPanel);
        viewPostLeftJPanel.setLayout(viewPostLeftJPanelLayout);
        viewPostLeftJPanelLayout.setHorizontalGroup(
                viewPostLeftJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(viewPostKeysJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0,
                                Short.MAX_VALUE)
                        .addComponent(viewPostKeysQueryJComboBox, 0, 219, Short.MAX_VALUE)
                        .addComponent(viewPostKeysQueryCountsJTextField));
        viewPostLeftJPanelLayout.setVerticalGroup(
                viewPostLeftJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                        javax.swing.GroupLayout.Alignment.TRAILING,
                        viewPostLeftJPanelLayout.createSequentialGroup()
                                .addComponent(viewPostKeysQueryJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(viewPostKeysJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(viewPostKeysQueryCountsJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)));

        viewPostJSplitPane.setLeftComponent(viewPostLeftJPanel);
        viewPostLeftJPanel.getAccessibleContext().setAccessibleParent(viewPostJSplitPane);

        viewPostRightJPanel.setPreferredSize(new java.awt.Dimension(880, 500));

        viewPostJScrollPane.setPreferredSize(new java.awt.Dimension(880, 500));

        viewPostJTextArea.setEditable(false);
        viewPostJTextArea.setColumns(20);
        viewPostJTextArea.setLineWrap(true);
        viewPostJTextArea.setRows(5);
        viewPostJTextArea.setTabSize(4);
        viewPostJTextArea.setWrapStyleWord(true);
        ((DefaultCaret) viewPostJTextArea.getCaret()).setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
        viewPostJScrollPane.setViewportView(viewPostJTextArea);

        viewPostLikeJButton.setText("LIKE");
        viewPostLikeJButton.setEnabled(false);
        viewPostLikeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                viewPostLikeJButtonActionPerformed(evt);
            }
        });

        viewPostStatusJTextField.setEditable(false);

        viewPostPostKeyJTextField.setEditable(false);
        viewPostPostKeyJTextField.setToolTipText("Post Key");

        final javax.swing.GroupLayout viewPostRightJPanelLayout = new javax.swing.GroupLayout(viewPostRightJPanel);
        viewPostRightJPanel.setLayout(viewPostRightJPanelLayout);
        viewPostRightJPanelLayout.setHorizontalGroup(
                viewPostRightJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(viewPostJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1061, Short.MAX_VALUE)
                        .addComponent(viewPostLikeJButton, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewPostStatusJTextField).addComponent(viewPostPostKeyJTextField));
        viewPostRightJPanelLayout.setVerticalGroup(
                viewPostRightJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                        javax.swing.GroupLayout.Alignment.TRAILING,
                        viewPostRightJPanelLayout.createSequentialGroup().addComponent(viewPostLikeJButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(viewPostPostKeyJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(viewPostJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 473,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(viewPostStatusJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)));

        viewPostLikeJButton.getAccessibleContext().setAccessibleName("");

        viewPostJSplitPane.setRightComponent(viewPostRightJPanel);

        contentJTabbedPane.addTab("Posts", viewPostJSplitPane);

        postEditorJScrollPane.setPreferredSize(new java.awt.Dimension(1275, 528));

        postEditorJTextArea.setColumns(20);
        postEditorJTextArea.setLineWrap(true);
        postEditorJTextArea.setRows(5);
        postEditorJTextArea.setTabSize(4);
        postEditorJTextArea.setWrapStyleWord(true);
        postEditorJScrollPane.setViewportView(postEditorJTextArea);

        publishPostSubmitJButton.setText("Publish");
        publishPostSubmitJButton.setToolTipText("");
        publishPostSubmitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                publishPostSubmitJButtonActionPerformed(evt);
            }
        });

        publishPostResetJButton.setText("Reset");
        publishPostResetJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                publishPostResetJButtonActionPerformed(evt);
            }
        });

        final javax.swing.GroupLayout publishPostJPanelLayout = new javax.swing.GroupLayout(publishPostJPanel);
        publishPostJPanel.setLayout(publishPostJPanelLayout);
        publishPostJPanelLayout.setHorizontalGroup(
                publishPostJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(publishPostJPanelLayout.createSequentialGroup().addContainerGap()
                                .addComponent(publishPostResetJButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(publishPostSubmitJButton).addContainerGap())
                        .addComponent(postEditorJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        publishPostJPanelLayout.setVerticalGroup(publishPostJPanelLayout
                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(publishPostJPanelLayout.createSequentialGroup()
                        .addComponent(postEditorJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 519,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(publishPostJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(publishPostSubmitJButton).addComponent(publishPostResetJButton))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        contentJTabbedPane.addTab("Publish", publishPostJPanel);

        viewLikeJSplitPane.setDividerLocation(220);

        viewLikeLeftJPanel.setPreferredSize(new java.awt.Dimension(400, 500));

        viewLikeKeysQueryJComboBox.setModel(
                new javax.swing.DefaultComboBoxModel<>(new String[] { "Search By Post Key", "Search By Like Key" }));
        viewLikeKeysQueryJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                viewLikeKeysQueryJComboBoxActionPerformed(evt);
            }
        });

        viewLikeKeysJScrollPane.setPreferredSize(new java.awt.Dimension(400, 500));

        viewLikeKeysJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        viewLikeKeysJList.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(final java.beans.PropertyChangeEvent evt) {
                viewLikeKeysJListPropertyChange(evt);
            }
        });
        viewLikeKeysJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(final javax.swing.event.ListSelectionEvent evt) {
                viewLikeKeysJListValueChanged(evt);
            }
        });
        viewLikeKeysJScrollPane.setViewportView(viewLikeKeysJList);

        viewLikeKeysQueryCountsJTextField.setEditable(false);

        final javax.swing.GroupLayout viewLikeLeftJPanelLayout = new javax.swing.GroupLayout(viewLikeLeftJPanel);
        viewLikeLeftJPanel.setLayout(viewLikeLeftJPanelLayout);
        viewLikeLeftJPanelLayout.setHorizontalGroup(
                viewLikeLeftJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(viewLikeKeysJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0,
                                Short.MAX_VALUE)
                        .addComponent(viewLikeKeysQueryJComboBox, 0, 219, Short.MAX_VALUE)
                        .addComponent(viewLikeKeysQueryCountsJTextField));
        viewLikeLeftJPanelLayout.setVerticalGroup(
                viewLikeLeftJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                        javax.swing.GroupLayout.Alignment.TRAILING,
                        viewLikeLeftJPanelLayout.createSequentialGroup()
                                .addComponent(viewLikeKeysQueryJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(viewLikeKeysJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(viewLikeKeysQueryCountsJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)));

        viewLikeJSplitPane.setLeftComponent(viewLikeLeftJPanel);

        viewLikeRightJPanel.setPreferredSize(new java.awt.Dimension(880, 500));

        viewLikeJScrollPane.setPreferredSize(new java.awt.Dimension(880, 500));

        viewLikeJTextArea.setEditable(false);
        viewLikeJTextArea.setColumns(20);
        viewLikeJTextArea.setLineWrap(true);
        viewLikeJTextArea.setRows(5);
        viewLikeJTextArea.setTabSize(4);
        viewLikeJTextArea.setWrapStyleWord(true);
        ((DefaultCaret) viewLikeJTextArea.getCaret()).setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
        viewLikeJScrollPane.setViewportView(viewLikeJTextArea);

        viewLikeStatusJTextField.setEditable(false);

        viewLikeLikeKeyJTextField.setEditable(false);
        viewLikeLikeKeyJTextField.setToolTipText("Like Key");

        final javax.swing.GroupLayout viewLikeRightJPanelLayout = new javax.swing.GroupLayout(viewLikeRightJPanel);
        viewLikeRightJPanel.setLayout(viewLikeRightJPanelLayout);
        viewLikeRightJPanelLayout.setHorizontalGroup(
                viewLikeRightJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(viewLikeJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1061, Short.MAX_VALUE)
                        .addComponent(viewLikeStatusJTextField).addComponent(viewLikeLikeKeyJTextField));
        viewLikeRightJPanelLayout.setVerticalGroup(
                viewLikeRightJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(viewLikeRightJPanelLayout.createSequentialGroup()
                                .addComponent(viewLikeLikeKeyJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(viewLikeJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(viewLikeStatusJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)));

        viewLikeJSplitPane.setRightComponent(viewLikeRightJPanel);

        contentJTabbedPane.addTab("Likes", viewLikeJSplitPane);

        viewPointTransactionJSplitPane.setDividerLocation(220);

        viewPointTransactionLeftJPanel.setPreferredSize(new java.awt.Dimension(400, 500));

        viewPointTransactionKeysQueryJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(
                new String[] { "All", "Search By Payer", "Search By Point Transaction Key" }));
        viewPointTransactionKeysQueryJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                viewPointTransactionKeysQueryJComboBoxActionPerformed(evt);
            }
        });

        viewPointTransactionKeysJScrollPane.setPreferredSize(new java.awt.Dimension(400, 500));

        viewPointTransactionKeysJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        viewPointTransactionKeysJList.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(final java.beans.PropertyChangeEvent evt) {
                viewPointTransactionKeysJListPropertyChange(evt);
            }
        });
        viewPointTransactionKeysJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(final javax.swing.event.ListSelectionEvent evt) {
                viewPointTransactionKeysJListValueChanged(evt);
            }
        });
        viewPointTransactionKeysJScrollPane.setViewportView(viewPointTransactionKeysJList);

        viewPointTransactionKeysQueryCountsJTextField.setEditable(false);

        final javax.swing.GroupLayout viewPointTransactionLeftJPanelLayout = new javax.swing.GroupLayout(
                viewPointTransactionLeftJPanel);
        viewPointTransactionLeftJPanel.setLayout(viewPointTransactionLeftJPanelLayout);
        viewPointTransactionLeftJPanelLayout.setHorizontalGroup(viewPointTransactionLeftJPanelLayout
                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(viewPointTransactionKeysJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0,
                        Short.MAX_VALUE)
                .addComponent(viewPointTransactionKeysQueryJComboBox, 0, 219, Short.MAX_VALUE)
                .addComponent(viewPointTransactionKeysQueryCountsJTextField));
        viewPointTransactionLeftJPanelLayout.setVerticalGroup(viewPointTransactionLeftJPanelLayout
                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewPointTransactionLeftJPanelLayout
                        .createSequentialGroup()
                        .addComponent(viewPointTransactionKeysQueryJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewPointTransactionKeysJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(
                                viewPointTransactionKeysQueryCountsJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)));

        viewPointTransactionJSplitPane.setLeftComponent(viewPointTransactionLeftJPanel);

        viewPointTransactionRightJPanel.setPreferredSize(new java.awt.Dimension(880, 500));

        viewPointTransactionJScrollPane.setPreferredSize(new java.awt.Dimension(880, 500));

        viewPointTransactionJTextArea.setEditable(false);
        viewPointTransactionJTextArea.setColumns(20);
        viewPointTransactionJTextArea.setLineWrap(true);
        viewPointTransactionJTextArea.setRows(5);
        viewPointTransactionJTextArea.setTabSize(4);
        viewPointTransactionJTextArea.setWrapStyleWord(true);
        ((DefaultCaret) viewPointTransactionJTextArea.getCaret()).setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
        viewPointTransactionJScrollPane.setViewportView(viewPointTransactionJTextArea);

        viewPointTransactionStatusJTextField.setEditable(false);

        viewPointTransactionPointTransactionKeyJTextField.setEditable(false);
        viewPointTransactionPointTransactionKeyJTextField.setToolTipText("Point Transaction Key");

        final javax.swing.GroupLayout viewPointTransactionRightJPanelLayout = new javax.swing.GroupLayout(
                viewPointTransactionRightJPanel);
        viewPointTransactionRightJPanel.setLayout(viewPointTransactionRightJPanelLayout);
        viewPointTransactionRightJPanelLayout.setHorizontalGroup(
                viewPointTransactionRightJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(viewPointTransactionJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1061,
                                Short.MAX_VALUE)
                        .addComponent(viewPointTransactionStatusJTextField)
                        .addComponent(viewPointTransactionPointTransactionKeyJTextField));
        viewPointTransactionRightJPanelLayout.setVerticalGroup(viewPointTransactionRightJPanelLayout
                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(viewPointTransactionRightJPanelLayout.createSequentialGroup()
                        .addComponent(viewPointTransactionPointTransactionKeyJTextField,
                                javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(viewPointTransactionJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewPointTransactionStatusJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)));

        viewPointTransactionJSplitPane.setRightComponent(viewPointTransactionRightJPanel);

        contentJTabbedPane.addTab("Point Transactions", viewPointTransactionJSplitPane);

        final javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(userSearchJSeparator)
                .addGroup(layout.createSequentialGroup()
                        .addComponent(contentJTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup().addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(searchJTextField)
                                .addGroup(layout.createSequentialGroup()
                                        .addComponent(userPublicKeyJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(userPrivateKeyJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(generateKeyPairJButton, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(pointAmountJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pointAmountJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(refreshPointAmountJButton, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(statusJProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 136,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MessageJTextField)))
                        .addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup().addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(userPublicKeyJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(userPrivateKeyJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(generateKeyPairJButton).addComponent(refreshPointAmountJButton)
                                .addComponent(pointAmountJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(pointAmountJLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userSearchJSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(searchJTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(contentJTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(MessageJTextField).addComponent(statusJProgressBar,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        contentJTabbedPane.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateKeyPairJButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_generateKeyPairJButtonActionPerformed
        if (!this.userPublicKeyJTextField.getText().isEmpty() || !this.userPrivateKeyJTextField.getText().isEmpty()) {
            final int choice = JOptionPane.showConfirmDialog(null,
                    "Do you want to overwrite the existing Public and/or Private Keys?", "Warning",
                    JOptionPane.OK_CANCEL_OPTION);
            if (choice == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }
        try {
            final KeyPair keyPair = Cryptography.generateRandomKeyPair();
            final String publicKeyString = ByteUtils.toAsciiString(keyPair.getPublic().getEncoded());
            final String privateKeyString = ByteUtils.toAsciiString(keyPair.getPrivate().getEncoded());
            this.userPublicKeyJTextField.setText(publicKeyString);
            this.userPrivateKeyJTextField.setText(privateKeyString);
        } catch (InvalidAlgorithmParameterException | NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }// GEN-LAST:event_generateKeyPairJButtonActionPerformed

    private void refreshPointAmountJButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_refreshPointAmountJButtonActionPerformed
        this.pointAmountJTextField.setText(new String());
        final var appUser = ServiceProvider.createAnonymousService(this.contract);
        final String pointAmount = appUser.computePointAmountByUserId(this.userPublicKeyJTextField.getText());
        if (pointAmount != null) {
            this.pointAmountJTextField.setText(pointAmount);
        }
    }// GEN-LAST:event_refreshPointAmountJButtonActionPerformed

    private void searchJTextFieldActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_searchJTextFieldActionPerformed
        this.refreshContentJTabbedPane();
    }// GEN-LAST:event_searchJTextFieldActionPerformed

    private void viewPostLikeJButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_viewPostLikeJButtonActionPerformed
        PublicKey publicKeyCandidate = null;
        PrivateKey privateKeyCandidate = null;
        try {
            final String publicKeyString = this.userPublicKeyJTextField.getText();
            publicKeyCandidate = Cryptography.parsePublicKey(ByteUtils.fromAsciiString(publicKeyString));
            final String privateKeyString = this.userPrivateKeyJTextField.getText();
            privateKeyCandidate = Cryptography.parsePrivateKey(ByteUtils.fromAsciiString(privateKeyString));
        } catch (InvalidKeySpecException | NoSuchAlgorithmException | IllegalArgumentException e1) {
            publicKeyCandidate = null;
            privateKeyCandidate = null;
        } finally {
            if (publicKeyCandidate == null || privateKeyCandidate == null) {
                JOptionPane.showMessageDialog(null, "Please provide valid Public/Private Key Pair!");
                return;
            }
            if (!Cryptography.verifyKeyPair(publicKeyCandidate, privateKeyCandidate)) {
                final int choice = JOptionPane.showConfirmDialog(null,
                        "Non-matching Public/Private Key Pair! Do you still want to proceed?", "Warning",
                        JOptionPane.OK_CANCEL_OPTION);
                if (choice == JOptionPane.CANCEL_OPTION) {
                    return;
                }
            }
        }

        final int choice = JOptionPane.showConfirmDialog(null,
                "Do you want to consume " + NamedWriteableService.getPointCostForPublishingLike()
                        + " Point to like the post using the provided Public/Private Key Pair?",
                "Confirm", JOptionPane.OK_CANCEL_OPTION);
        if (choice == JOptionPane.CANCEL_OPTION) {
            return;
        }

        this.setBusy(true);

        final PublicKey publicKey = publicKeyCandidate;
        final PrivateKey privateKey = privateKeyCandidate;
        final String postKey = this.viewPostPostKeyJTextField.getText();
        final SwingWorker<Boolean, Void> task = new SwingWorker<Boolean, Void>() {
            @Override
            public Boolean doInBackground() {
                final var appUser = ServiceProvider.createNamedService(ForumJFrame.this.contract, publicKey,
                        privateKey);
                appUser.publishNewLike(postKey);
                setProgress(100);
                return true;
            }
        };

        task.addPropertyChangeListener((final PropertyChangeEvent evt1) -> {
            if ("progress".equals(evt1.getPropertyName()) && (Integer) evt1.getNewValue() == 100) {
                Boolean result = false;
                try {
                    result = task.get();
                } catch (InterruptedException | ExecutionException e) {
                    e.printStackTrace();
                }
                ForumJFrame.this.setBusy(false);
                if (result != null && result) {
                    JOptionPane.showMessageDialog(null, "The like was published successfully!");
                    ForumJFrame.this.postEditorJTextArea.setText(new String());
                } else {
                    JOptionPane.showMessageDialog(null, "The like failed to be published!");
                }
            }
        });

        task.execute();
    }// GEN-LAST:event_viewPostLikeJButtonActionPerformed

    private void publishPostSubmitJButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_publishPostSubmitJButtonActionPerformed
        PublicKey publicKeyCandidate = null;
        PrivateKey privateKeyCandidate = null;
        try {
            final String publicKeyString = this.userPublicKeyJTextField.getText();
            publicKeyCandidate = Cryptography.parsePublicKey(ByteUtils.fromAsciiString(publicKeyString));
            final String privateKeyString = this.userPrivateKeyJTextField.getText();
            privateKeyCandidate = Cryptography.parsePrivateKey(ByteUtils.fromAsciiString(privateKeyString));
        } catch (InvalidKeySpecException | NoSuchAlgorithmException | IllegalArgumentException e1) {
            publicKeyCandidate = null;
            privateKeyCandidate = null;
        } finally {
            if (publicKeyCandidate == null || privateKeyCandidate == null) {
                JOptionPane.showMessageDialog(null, "Please provide valid Public/Private Key Pair!");
                return;
            }
            if (!Cryptography.verifyKeyPair(publicKeyCandidate, privateKeyCandidate)) {
                final int choice = JOptionPane.showConfirmDialog(null,
                        "Non-matching Public/Private Key Pair! Do you still want to proceed?", "Warning",
                        JOptionPane.OK_CANCEL_OPTION);
                if (choice == JOptionPane.CANCEL_OPTION) {
                    return;
                }
            }
        }

        final int choice = JOptionPane.showConfirmDialog(null,
                "Do you want to publish the post using the provided Public/Private Key Pair?", "Confirm",
                JOptionPane.OK_CANCEL_OPTION);
        if (choice == JOptionPane.CANCEL_OPTION) {
            return;
        }

        this.setBusy(true);

        final PublicKey publicKey = publicKeyCandidate;
        final PrivateKey privateKey = privateKeyCandidate;
        final SwingWorker<Boolean, Void> task = new SwingWorker<Boolean, Void>() {
            @Override
            public Boolean doInBackground() {
                final var appUser = ServiceProvider.createNamedService(ForumJFrame.this.contract, publicKey,
                        privateKey);
                appUser.publishNewPost(ForumJFrame.this.postEditorJTextArea.getText());
                setProgress(100);
                return true;
            }
        };

        task.addPropertyChangeListener((final PropertyChangeEvent evt1) -> {
            if ("progress".equals(evt1.getPropertyName()) && (Integer) evt1.getNewValue() == 100) {
                Boolean result = false;
                try {
                    result = task.get();
                } catch (InterruptedException | ExecutionException e) {
                    e.printStackTrace();
                }
                ForumJFrame.this.setBusy(false);
                if (result != null && result) {
                    JOptionPane.showMessageDialog(null, "The post was published successfully!");
                    ForumJFrame.this.postEditorJTextArea.setText(new String());
                } else {
                    JOptionPane.showMessageDialog(null, "The post failed to be published!");
                }
            }
        });

        task.execute();
    }// GEN-LAST:event_publishPostSubmitJButtonActionPerformed

    private void publishPostResetJButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_publishPostResetJButtonActionPerformed
        final int choice = JOptionPane.showConfirmDialog(null, "Do you want to discard the content?", "Warning",
                JOptionPane.OK_CANCEL_OPTION);
        if (choice == JOptionPane.CANCEL_OPTION) {
            return;
        }
        this.postEditorJTextArea.setText(new String());
    }// GEN-LAST:event_publishPostResetJButtonActionPerformed

    private void viewPointTransactionKeysQueryJComboBoxActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_viewPointTransactionKeysQueryJComboBoxActionPerformed
        final String selectedQueryMethod = (String) this.viewPointTransactionKeysQueryJComboBox.getSelectedItem();
        final String searchString = this.searchJTextField.getText();
        this.viewPointTransactionKeysJList.setListData(new String[0]);

        if ("All".equals(selectedQueryMethod)) {
            final var userApp = ServiceProvider.createAnonymousService(this.contract);
            final String[] pointTransactionKeys = userApp.fetchPointTransactionKeys();
            if (pointTransactionKeys != null) {
                this.viewPointTransactionKeysJList.setListData(pointTransactionKeys);
            }
        } else if ("Search By Payer".equals(selectedQueryMethod)) {
            final var userApp = ServiceProvider.createAnonymousService(this.contract);
            final String[] pointTransactionKeys = userApp.fetchPointTransactionKeysByUserId(searchString);
            if (pointTransactionKeys != null) {
                this.viewPointTransactionKeysJList.setListData(pointTransactionKeys);
            }
        } else if ("Search By Point Transaction Key".equals(selectedQueryMethod)) {
            final var userApp = ServiceProvider.createAnonymousService(this.contract);
            if (userApp.fetchPointTransactionByPointTransactionKey(searchString) != null) {
                this.viewPointTransactionKeysJList.setListData(new String[] { searchString });
            }
        } else {
            throw new UnsupportedOperationException();
        }
    }// GEN-LAST:event_viewPointTransactionKeysQueryJComboBoxActionPerformed

    private void viewLikeKeysQueryJComboBoxActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_viewLikeKeysQueryJComboBoxActionPerformed
        final String selectedQueryMethod = (String) this.viewLikeKeysQueryJComboBox.getSelectedItem();
        final String searchString = this.searchJTextField.getText();
        this.viewLikeKeysJList.setListData(new String[0]);

        if ("Search By Post Key".equals(selectedQueryMethod)) {
            final var userApp = ServiceProvider.createAnonymousService(this.contract);
            final String[] likeKeys = userApp.fetchLikeKeysByPostKey(searchString);
            if (likeKeys != null) {
                this.viewLikeKeysJList.setListData(likeKeys);
            }
        } else if ("Search By Like Key".equals(selectedQueryMethod)) {
            final var userApp = ServiceProvider.createAnonymousService(this.contract);
            if (userApp.fetchLikeByLikeKey(searchString) != null) {
                this.viewLikeKeysJList.setListData(new String[] { searchString });
            }
        } else {
            throw new UnsupportedOperationException();
        }
    }// GEN-LAST:event_viewLikeKeysQueryJComboBoxActionPerformed

    private void viewPostKeysQueryJComboBoxActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_viewPostKeysQueryJComboBoxActionPerformed
        final String selectedQueryMethod = (String) this.viewPostKeysQueryJComboBox.getSelectedItem();
        final String searchString = this.searchJTextField.getText();
        this.viewPostKeysJList.setListData(new String[0]);

        if ("All".equals(selectedQueryMethod)) {
            final var userApp = ServiceProvider.createAnonymousService(this.contract);
            final String[] postKeys = userApp.fetchPostKeys();
            if (postKeys != null) {
                this.viewPostKeysJList.setListData(postKeys);
            }
        } else if ("Search By Author".equals(selectedQueryMethod)) {
            final var userApp = ServiceProvider.createAnonymousService(this.contract);
            final String[] postKeys = userApp.fetchPostKeysByUserId(searchString);
            if (postKeys != null) {
                this.viewPostKeysJList.setListData(postKeys);
            }
        } else if ("Search By Post Key".equals(selectedQueryMethod)) {
            final var userApp = ServiceProvider.createAnonymousService(this.contract);
            if (userApp.fetchPostByPostKey(searchString) != null) {
                this.viewPostKeysJList.setListData(new String[] { searchString });
            }
        } else {
            throw new UnsupportedOperationException();
        }
    }// GEN-LAST:event_viewPostKeysQueryJComboBoxActionPerformed

    private void viewLikeKeysJListPropertyChange(final java.beans.PropertyChangeEvent evt) {// GEN-FIRST:event_viewLikeKeysJListPropertyChange
        if ("model".equals(evt.getPropertyName())) {
            final int jListSize = ((ListModel<?>) evt.getNewValue()).getSize();
            this.viewLikeKeysQueryCountsJTextField.setText(String.valueOf(jListSize));
            if (jListSize == 0) {
                this.viewLikeKeysJList.setSelectedIndex(-1);
            } else {
                this.viewLikeKeysJList.setSelectedIndex(0);
            }
        }
    }// GEN-LAST:event_viewLikeKeysJListPropertyChange

    private void viewPointTransactionKeysJListPropertyChange(final java.beans.PropertyChangeEvent evt) {// GEN-FIRST:event_viewPointTransactionKeysJListPropertyChange
        if ("model".equals(evt.getPropertyName())) {
            final int jListSize = ((ListModel<?>) evt.getNewValue()).getSize();
            this.viewPointTransactionKeysQueryCountsJTextField.setText(String.valueOf(jListSize));
            if (jListSize == 0) {
                this.viewPointTransactionKeysJList.setSelectedIndex(-1);
            } else {
                this.viewPointTransactionKeysJList.setSelectedIndex(0);
            }
        }
    }// GEN-LAST:event_viewPointTransactionKeysJListPropertyChange

    private void viewPostKeysJListPropertyChange(final java.beans.PropertyChangeEvent evt) {// GEN-FIRST:event_viewPostKeysJListPropertyChange
        if ("model".equals(evt.getPropertyName())) {
            final int jListSize = ((ListModel<?>) evt.getNewValue()).getSize();
            this.viewPostKeysQueryCountsJTextField.setText(String.valueOf(jListSize));
            if (jListSize == 0) {
                this.viewPostKeysJList.setSelectedIndex(-1);
            } else {
                this.viewPostKeysJList.setSelectedIndex(0);
            }
        }
    }// GEN-LAST:event_viewPostKeysJListPropertyChange

    private void viewPointTransactionKeysJListValueChanged(final javax.swing.event.ListSelectionEvent evt) {// GEN-FIRST:event_viewPointTransactionKeysJListValueChanged
        if (evt.getValueIsAdjusting()) {
            return;
        }

        if (this.viewPointTransactionKeysJList.getSelectedIndex() == -1) {
            return;
        }

        final String selectedPointTransactionKey = this.viewPointTransactionKeysJList.getSelectedValue();
        final var userApp = ServiceProvider.createAnonymousService(this.contract);
        final PointTransaction pointTransaction = userApp
                .fetchPointTransactionByPointTransactionKey(selectedPointTransactionKey);
        if (pointTransaction != null) {
            String pointTransactionTextArea = "Timestamp: " + pointTransaction.timestamp + "\n\n";
            pointTransactionTextArea += "IssuerUserId: " + pointTransaction.issuerUserId + "\n\n";
            pointTransactionTextArea += "PayerEntry: " + pointTransaction.payerEntry.toString() + "\n\n";
            pointTransactionTextArea += "PayeeEntries: " + Arrays.toString(pointTransaction.payeeEntries) + "\n\n";
            pointTransactionTextArea += "Reference: " + pointTransaction.reference + "\n\n";
            pointTransactionTextArea += "RelativeOrder: " + pointTransaction.relativeOrder + "\n\n";
            pointTransactionTextArea += "Tracking: " + pointTransaction.payerPointTransactionTracking + "\n\n";

            this.viewPointTransactionPointTransactionKeyJTextField.setText(selectedPointTransactionKey);
            this.viewPointTransactionJTextArea.setText(pointTransactionTextArea);

            final var verify = userApp.verifyPointTransaction(selectedPointTransactionKey);
            this.viewPointTransactionStatusJTextField.setText(verify.getItemsString());
            this.viewPointTransactionStatusJTextField.setBackground(
                    verify.isValid() ? new java.awt.Color(200, 255, 200) : new java.awt.Color(255, 200, 200));
        } else {
            this.viewPointTransactionPointTransactionKeyJTextField.setText(new String());
            this.viewPointTransactionJTextArea.setText(new String());
            this.viewPointTransactionStatusJTextField.setBackground(java.awt.Color.WHITE);
            this.viewPointTransactionStatusJTextField.setText(new String());
        }
    }// GEN-LAST:event_viewPointTransactionKeysJListValueChanged

    private void viewLikeKeysJListValueChanged(final javax.swing.event.ListSelectionEvent evt) {// GEN-FIRST:event_viewLikeKeysJListValueChanged
        if (evt.getValueIsAdjusting()) {
            return;
        }
        if (this.viewLikeKeysJList.getSelectedIndex() == -1) {
            return;
        }

        final String selectedLikeKey = this.viewLikeKeysJList.getSelectedValue();
        final var userApp = ServiceProvider.createAnonymousService(this.contract);
        final Like like = userApp.fetchLikeByLikeKey(selectedLikeKey);
        if (like != null) {
            String likeTextArea = "Timestamp: " + like.timestamp + "\n\n";
            likeTextArea += "PostKey: " + like.postKey + "\n\n";
            likeTextArea += "PointTransactionKey: " + like.pointTransactionKey + "\n\n";
            likeTextArea += "Liker: " + like.userId + "\n\n";
            likeTextArea += "RelativeOrder: " + like.relativeOrder + "\n\n";

            this.viewLikeLikeKeyJTextField.setText(selectedLikeKey);
            this.viewLikeJTextArea.setText(likeTextArea);

            final var verify = userApp.verifyLike(selectedLikeKey);
            this.viewLikeStatusJTextField.setText(verify.getItemsString());
            this.viewLikeStatusJTextField.setBackground(
                    verify.isValid() ? new java.awt.Color(200, 255, 200) : new java.awt.Color(255, 200, 200));
        } else {
            this.viewLikeLikeKeyJTextField.setText(new String());
            this.viewLikeJTextArea.setText(new String());
            this.viewLikeStatusJTextField.setBackground(java.awt.Color.WHITE);
            this.viewLikeStatusJTextField.setText(new String());
        }
    }// GEN-LAST:event_viewLikeKeysJListValueChanged

    private void viewPostKeysJListValueChanged(final javax.swing.event.ListSelectionEvent evt) {// GEN-FIRST:event_viewPostKeysJListValueChanged
        if (evt.getValueIsAdjusting()) {
            return;
        }
        if (this.viewPostKeysJList.getSelectedIndex() == -1) {
            return;
        }

        final String selectedPostKey = this.viewPostKeysJList.getSelectedValue();
        final var userApp = ServiceProvider.createAnonymousService(this.contract);
        final Post post = userApp.fetchPostByPostKey(selectedPostKey);
        if (post != null) {
            String postTextArea = "Timestamp: " + post.timestamp + "\n\n";
            postTextArea += "Author: " + post.userId + "\n\n";
            postTextArea += "Content: " + post.content + "\n\n";

            this.viewPostPostKeyJTextField.setText(selectedPostKey);
            this.viewPostJTextArea.setText(postTextArea);
            this.viewPostLikeJButton.setEnabled(true);

            final var verify = userApp.verifyPost(selectedPostKey);
            this.viewPostStatusJTextField.setText(verify.getItemsString());
            this.viewPostStatusJTextField.setBackground(
                    verify.isValid() ? new java.awt.Color(200, 255, 200) : new java.awt.Color(255, 200, 200));
        } else {
            this.viewPostPostKeyJTextField.setText(new String());
            this.viewPostJTextArea.setText(new String());
            this.viewPostLikeJButton.setEnabled(false);
            this.viewPostStatusJTextField.setBackground(java.awt.Color.WHITE);
            this.viewPostStatusJTextField.setText(new String());
        }
    }// GEN-LAST:event_viewPostKeysJListValueChanged

    private void setBusy(final boolean isBusy) {
        if (isBusy) {
            this.statusJProgressBar.setIndeterminate(true);
            this.setEnabled(false);
        } else {
            this.statusJProgressBar.setIndeterminate(false);
            this.setEnabled(true);
        }
    }

    private void refreshContentJTabbedPane() {
        final var selected_pane = this.contentJTabbedPane.getSelectedComponent();
        if (selected_pane == this.viewPostJSplitPane) {
            this.viewPostKeysQueryJComboBox.setSelectedIndex(this.viewPostKeysQueryJComboBox.getSelectedIndex());
        } else if (selected_pane == this.viewLikeJSplitPane) {
            this.viewLikeKeysQueryJComboBox.setSelectedIndex(this.viewLikeKeysQueryJComboBox.getSelectedIndex());
        } else if (selected_pane == this.viewPointTransactionJSplitPane) {
            this.viewPointTransactionKeysQueryJComboBox
                    .setSelectedIndex(this.viewPointTransactionKeysQueryJComboBox.getSelectedIndex());
        }
    }

    public static void run(final Contract contract, final String frameTitleString) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (final javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (final ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ForumJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (final InstantiationException ex) {
            java.util.logging.Logger.getLogger(ForumJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (final IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ForumJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (final javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ForumJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ForumJFrame(contract, frameTitleString).setVisible(true);
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        run(null, null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField MessageJTextField;
    private javax.swing.JTabbedPane contentJTabbedPane;
    private javax.swing.JButton generateKeyPairJButton;
    private javax.swing.JLabel pointAmountJLabel;
    private javax.swing.JTextField pointAmountJTextField;
    private javax.swing.JScrollPane postEditorJScrollPane;
    private javax.swing.JTextArea postEditorJTextArea;
    private javax.swing.JPanel publishPostJPanel;
    private javax.swing.JButton publishPostResetJButton;
    private javax.swing.JButton publishPostSubmitJButton;
    private javax.swing.JButton refreshPointAmountJButton;
    private javax.swing.JTextField searchJTextField;
    private javax.swing.JProgressBar statusJProgressBar;
    private javax.swing.JTextField userPrivateKeyJTextField;
    private javax.swing.JTextField userPublicKeyJTextField;
    private javax.swing.JSeparator userSearchJSeparator;
    private javax.swing.JScrollPane viewLikeJScrollPane;
    private javax.swing.JSplitPane viewLikeJSplitPane;
    private javax.swing.JTextArea viewLikeJTextArea;
    private javax.swing.JList<String> viewLikeKeysJList;
    private javax.swing.JScrollPane viewLikeKeysJScrollPane;
    private javax.swing.JTextField viewLikeKeysQueryCountsJTextField;
    private javax.swing.JComboBox<String> viewLikeKeysQueryJComboBox;
    private javax.swing.JPanel viewLikeLeftJPanel;
    private javax.swing.JTextField viewLikeLikeKeyJTextField;
    private javax.swing.JPanel viewLikeRightJPanel;
    private javax.swing.JTextField viewLikeStatusJTextField;
    private javax.swing.JScrollPane viewPointTransactionJScrollPane;
    private javax.swing.JSplitPane viewPointTransactionJSplitPane;
    private javax.swing.JTextArea viewPointTransactionJTextArea;
    private javax.swing.JList<String> viewPointTransactionKeysJList;
    private javax.swing.JScrollPane viewPointTransactionKeysJScrollPane;
    private javax.swing.JTextField viewPointTransactionKeysQueryCountsJTextField;
    private javax.swing.JComboBox<String> viewPointTransactionKeysQueryJComboBox;
    private javax.swing.JPanel viewPointTransactionLeftJPanel;
    private javax.swing.JTextField viewPointTransactionPointTransactionKeyJTextField;
    private javax.swing.JPanel viewPointTransactionRightJPanel;
    private javax.swing.JTextField viewPointTransactionStatusJTextField;
    private javax.swing.JScrollPane viewPostJScrollPane;
    private javax.swing.JSplitPane viewPostJSplitPane;
    private javax.swing.JTextArea viewPostJTextArea;
    private javax.swing.JList<String> viewPostKeysJList;
    private javax.swing.JScrollPane viewPostKeysJScrollPane;
    private javax.swing.JTextField viewPostKeysQueryCountsJTextField;
    private javax.swing.JComboBox<String> viewPostKeysQueryJComboBox;
    private javax.swing.JPanel viewPostLeftJPanel;
    private javax.swing.JButton viewPostLikeJButton;
    private javax.swing.JTextField viewPostPostKeyJTextField;
    private javax.swing.JPanel viewPostRightJPanel;
    private javax.swing.JTextField viewPostStatusJTextField;
    // End of variables declaration//GEN-END:variables

    private final Contract contract;
    private final String frameTitleString;
}
